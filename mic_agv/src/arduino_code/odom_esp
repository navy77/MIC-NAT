// change ros.h    typedef NodeHandle_<ArduinoHardware, 10, 10, 512, 2048> NodeHandle;
// change  node_handle.h  int OUTPUT_SIZE = 2048>



#include <ros.h>
#include <ros/time.h>
#include <tf/tf.h>
#include <geometry_msgs/Twist.h>
#include <nav_msgs/Odometry.h>
#include <tf/transform_broadcaster.h>
long prv_time;

ros::NodeHandle nh;

geometry_msgs::TransformStamped t;
tf::TransformBroadcaster broadcaster;

nav_msgs::Odometry odom;
ros::Publisher odom_publisher("odom", &odom);


void odom_publish(){
    odom.header.stamp = nh.now();
    odom.header.frame_id = "odom";
    odom.child_frame_id = "base_link";
    odom.pose.pose.position.x = 1.0;
    odom.pose.pose.position.y = -1.0;
    odom.pose.pose.position.z = 0;

    odom.pose.pose.orientation.w = 0;
    odom.pose.pose.orientation.x = 0;
    odom.pose.pose.orientation.y = 0;
    odom.pose.pose.orientation.z = 1;

    odom.twist.twist.linear.x = 10;
    odom.twist.twist.linear.y = -10;
    odom.twist.twist.angular.z = 1.1;

    odom_publisher.publish(&odom);
}

void tf_pub(){
  t.header.stamp = nh.now();
  t.header.frame_id = "odom";
  t.child_frame_id = "base_link";
  
  t.transform.translation.x = 0.0; 
  t.transform.translation.y = 0.0; 
  t.transform.translation.z = 0.0;

  t.transform.rotation = tf::createQuaternionFromYaw(0);
  broadcaster.sendTransform(t);
}

void setup() {
   nh.initNode();
   broadcaster.init(nh);
   nh.getHardware()->setBaud(115200);
   nh.advertise(odom_publisher);   
}

void loop() {
    if(millis()-prv_time >=50){
      odom_publish();
      
      prv_time = millis();
    }
    tf_pub();
    nh.spinOnce();
}
